generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id     String @id @default(uuid())
  name   String
  userId String
  billBoard BillBoard[] @relation("StoreToBillboard")
  category Category[] @relation("StoreToCategory")
  sizes Size[] @relation("storeToSize")
  colors Color[] @relation("storeToColor")
  products Product[] @relation("storeToProduct")
  orders Order[] @relation("storeToOrder")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  
}
model BillBoard {
  id     String @id @default(uuid())
  storeId String
  store Store @relation("StoreToBillboard", fields: [storeId], references: [id])
  label String
  imageUrl String
  category Category[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([storeId])
}

model Category {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToCategory",fields: [storeId], references: [id])
  
  billboardId String
  billboard BillBoard @relation(fields: [billboardId], references: [id])
  product Product[] @relation("categoryToProduct")
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([storeId])
  @@index([billboardId])
}

model Size{
  id String @id @default(uuid())
  name String
  value String
  storeId String
  store Store @relation("storeToSize", fields: [storeId], references: [id])
  product Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Color {
  id String @id @default(uuid())
  name String
  value String
  storeId String
  store Store @relation("storeToColor",fields: [storeId], references: [id])
  product Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Product {
  id String @id @default(uuid())
  storeId String
  store Store @relation("storeToProduct", fields: [storeId], references: [id])
  categoryId String
  category Category @relation("categoryToProduct", fields: [categoryId], references: [id])

  name String
  price Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  sizeId String
  size Size @relation(fields: [sizeId], references: [id])
  colorId String
  color Color @relation(fields: [colorId], references: [id])
  images Image[]
  orderItem OrderItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id String @id @default(uuid())
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id String @id @default(uuid())
  storeId String
  store Store @relation("storeToOrder", fields: [storeId], references: [id])
  orderItem OrderItem[]
  isPaid Boolean @default(false)
  phone String @default("")
  address String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@index([storeId])
}

model OrderItem {
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  productId String
  product Product @relation(fields: [productId], references: [id])


  @@index([orderId])
  @@index([productId])
}